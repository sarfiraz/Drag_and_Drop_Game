{"version":3,"sources":["components/Answer.js","components/Modal.js","components/Content.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Answer","props","react_default","a","createElement","bundle","targetKey","disappearDraggedElement","dragData","data","arg","answer","className","style","Modal","display","title","content","onClick","closeModal","Content","_useState","useState","_useState2","Object","slicedToArray","timer","setTimer","_useState3","_useState4","score","setScore","_useState5","_useState6","move","setMove","_useState7","level","_useState8","task","setTask","_useState9","_useState10","array","setArray","_useState11","_useState12","flag2","setFlag2","_useState13","_useState14","text","setText","_useState15","_useState16","titleModal","setTitleModal","_useState17","_useState18","shouldStartGame","setShouldStartGame","_useState19","_useState20","mainDisplay","setMainDisplay","_useState21","_useState22","display2","_useState23","_useState24","display3","setDisplay3","_useState25","_useState26","flag","length","result","showModal","hideModal","useEffect","myInterval","setInterval","clearInterval","randomGenerate","num","Math","floor","random","change","arrAns","console","log","rand","includes","pop","push","realAnswer","splice","id","onHit","e","dropData","type","components_Modal","components_Answer","t","color","backgroundColor","App","components_Content","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","react","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e49f9a3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport data from '../levels.json';\r\nimport {DragDropContainer} from \"react-drag-drop-container\";\r\nimport '../style.css';\r\n\r\n//Answer component that we use in Content component\r\nconst Answer = (props)=>{\r\n    return(\r\n            <DragDropContainer targetKey=\"weGood\" disappearDraggedElement={true} dragData={data[props.arg].answer} >\r\n                <div className=\"container d-flex justify-content-center align-items-center m-1 item\" style={props.style} >\r\n                    <h5>{data[props.arg].answer}</h5>\r\n                </div>\r\n            </DragDropContainer>\r\n    )\r\n}\r\n\r\nexport default Answer","import React from \"react\";\r\nimport '../style.css';\r\n\r\n//Modal component that we use in Content component\r\nconst Modal =(props)=>{\r\n    if (!props.display)\r\n        return null\r\n    return(\r\n        <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-head\">\r\n                    <h4>{props.title}</h4>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <p>{props.content}</p>\r\n                </div>\r\n                <div className=\"modal-foot\">\r\n                    <button onClick={props.closeModal} className=\"btn btn-danger\">\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Modal","import React, {useState,useEffect} from 'react';\r\nimport {DropTarget} from 'react-drag-drop-container';  //import DropTarget from drag and drop Container library.\r\nimport '../style.css';         //importing our style.css file.\r\nimport data from \"../levels.json\";    //importing our json file to use it in pir game\r\nimport Answer from \"./Answer\";     //here we import the Answer component which we created in Answer.js file\r\nimport Modal from \"./Modal\";         //here we import the Modal component which we created in Modal.js file\r\n\r\n\r\n//here it is our main component which contains all part of the code\r\n//used in this website or game.  \r\n\r\nconst Content=()=>{\r\n\r\n    //down here is a list of all useState hooks that we use in our game.\r\n    //here they are all declared and initialized in one place.\r\n    const [timer,setTimer]= useState(0)\r\n    const [score,setScore]= useState(0)\r\n    const [move,setMove]= useState(0)\r\n    const [task,setTask]= useState(data[0].level-1)\r\n    const [array,setArray]=useState([])\r\n    const [flag2, setFlag2] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n    const [titleModal, setTitleModal] = useState(\"\");\r\n    const [shouldStartGame, setShouldStartGame] = useState(false);\r\n    const [mainDisplay, setMainDisplay]=useState(false)\r\n    const [display2,setDisplay2]=useState(true)\r\n    const [display3,setDisplay3]=useState(false)\r\n    const [display, setDisplay] = useState(true);\r\n\r\n\r\n    let flag = array.length>0   //this variable is such a decider for start and stopping the game\r\n                                //and its value is either true or false, and it's initialized by taking the length of array which contains random answers.\r\n    \r\n    let result=\" Time = ( \" + timer +\"  sec )    ||   Score = ( \"+     //its the string that will be displayed as a modal when the game ends\r\n        +(score*10)+\" )\"\r\n\r\n\r\n    let introTitle = \" Introduction & Rules\"  //the title for introduction modal\r\n    //the string or the text for introduction modal\r\n    let intro= \"in this game you will have 10 tasks and every task is known as a level which means 10 levels.\" +\r\n        \" to Start the game click (Start) button. then after starting the game you will see four answers bellow. \" +\r\n        \"then Drag the correct answer and Drop it in the box with text (Drop here!). if you drop wrong answer two times \" +\r\n        \"then the game goes to next level but you won't get score from that level. you can also use (solution) button if you are stuck and do not know the answer. \" +\r\n        \"by passing every level you get 10 scores. if you are stuck in any task or level click (Next) button it will go to next level again you won't get points from that level.\" +\r\n        \" at the end you can see your result which shows the time spent on the game and the scores that you got. and you can also restart the game using restart button. ENJOY :)\"\r\n\r\n    //function for displaying modal for result and introduction\r\n    const showModal = () => {\r\n        if (task>9){\r\n            setText(result)\r\n            setTitleModal(\"Your Result\")\r\n            setMainDisplay(display)\r\n         }\r\n        else {\r\n            setText(intro)\r\n            setTitleModal(introTitle)\r\n            setMainDisplay(display2)\r\n        }\r\n    }\r\n    \r\n    //the function to decide to display the solution modal\r\n    const showModalSolution = () => {\r\n        setDisplay3(true)\r\n    }\r\n    \r\n    //the function to close modal when clicking close button in the modal\r\n    const hideModal =()=>{\r\n        setDisplay3(false)\r\n        setMainDisplay(false)\r\n    }\r\n\r\n\r\n    //useEffect hook used for the timer in our game.\r\n    useEffect(()=>{\r\n        let myInterval = setInterval(() => {\r\n            if (timer >= 0 && shouldStartGame) {\r\n                setTimer(timer + 1);\r\n            }\r\n        }, 1000)\r\n        return ()=> {\r\n            clearInterval(myInterval);\r\n        };\r\n    });\r\n\r\n    //this function restarts or replays the game when clicking the restart button\r\n    const replayGame = ()=>{\r\n        setTimer(0)\r\n        setMove(0)\r\n        setTask(0)\r\n        setScore(0)\r\n        setFlag2(false)\r\n        flag=false\r\n        setShouldStartGame(false)\r\n    }\r\n\r\n    //this function is for restart and for replaying the game when it ends.\r\n    // and its sets values for timer score task... to value as it was when the game started. so it resets all values\r\n    const over = () => {\r\n        setMove(0)\r\n        setScore(0)\r\n        setTask(0)\r\n        flag=false\r\n        setShouldStartGame(false)\r\n        setFlag2(false)\r\n        setTimer(0)\r\n        showModal()\r\n        console.log(\"game finished\")\r\n    }\r\n    \r\n    //this function is for generating a random value with parameter num to decide the max value that could be generated\r\n    const randomGenerate = (num) => {\r\n        return Math.floor(Math.random()*num)\r\n    }\r\n    \r\n    //the most used function in our game. it changes the level according to different situations.\r\n    //going to next level, starting the game all is managed by this function\r\n    const change = () => {\r\n        setMove(0)\r\n        let arrAns =[]\r\n        console.log(\"task final1\",task)\r\n        setShouldStartGame(true);\r\n        setFlag2(true)\r\n\r\n        console.log(\"task\",task)\r\n        setTask(task + 1)\r\n        while (task<10){\r\n            const rand = randomGenerate(10)\r\n            if (arrAns.includes(task))\r\n                arrAns.pop(task)\r\n            if (arrAns.length>2)\r\n                break\r\n            if (arrAns.includes(rand)) {\r\n                continue\r\n            }\r\n            arrAns.push(rand)\r\n        }\r\n        const realAnswer = randomGenerate(4)\r\n        arrAns.splice(realAnswer,0,task)\r\n        setArray(arrAns)\r\n    }\r\n\r\n\r\n    //this one calls the over function if the levels are done if the game is at the end\r\n    if (task > 10) {\r\n        over()\r\n        return\r\n    }\r\n\r\n\r\n    //this is the most second used function in the game. it decides if the dropped answer in the box is correct or not.\r\n    //if correct then go to next level if not then increments Move value and if move reaches 2 then the game goes to next level but 0 score.\r\n    const onHit=(e)=>{\r\n        if (e.dragData !==data[task-1].answer){\r\n            setMove(move+1)\r\n            if (move>=1){\r\n                change()\r\n            }\r\n        }\r\n        if (e.dragData===data[task-1].answer){\r\n            if (score === 100)\r\n                setScore(0)\r\n            else\r\n                setScore(task<0 ? 0:score+1)\r\n            change()\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <header id=\"head\" className=\"rounded-pill bg-danger\">\r\n                <h1 className=\"h1 fw-bold text-center text-light\">Math game</h1>\r\n            </header>\r\n            <main>\r\n                <div className=\"container-fluid\">\r\n\r\n                    <div className=\"container-fluid d-flex flex-column\">\r\n                            <div className=\"container-fluid d-flex flex-wrap justify-content-around \">\r\n                                    <h4 id=\"score-counter\" className=\"text-center text-primary\">Score: <span\r\n                                        id=\"score-span\" className=\"badge bg-danger\">{ !shouldStartGame || task < 1 ?  '--' : (score)*10 }</span></h4>\r\n                                    <h4 id=\"level-counter\" className=\"text-center text-light\">Level: <span\r\n                                        id=\"level-span\" className=\"badge bg-success\">{shouldStartGame ? task:\"--\"}</span></h4>\r\n                                    <h4 id=\"timer-counter\" className=\"text-center text-danger\">Time: <span\r\n                                        id=\"timer-span\" className=\"badge bg-primary\">{shouldStartGame && flag2 ? timer : '--'}</span></h4>\r\n                                    <h4 id=\"move-counter\" className=\"text-center text-info\">Moves: <span\r\n                                          id=\"move-span\" className=\"badge text-dark bg-warning\">{shouldStartGame && flag2 ? move : '--'}</span></h4>\r\n                            </div>\r\n                        <div className=\"container-fluid m-2 bg-warning bg-opacity-75 description\">\r\n                            <p className=\"text-dark \">\r\n                                <b>description:</b>This game is a logical math game for kids and for people who has weak basics of math.\r\n                                the goal of this game is to train your brain with some basic math calculations. for <b>Instructions</b> about the games System click <mark>Intro</mark> button bellow\r\n                            </p>\r\n                        </div>\r\n\r\n                            <div className=\"container-fluid  d-flex justify-content-around flex-wrap\">\r\n                                <div>\r\n                                    <div className=\"container d-flex justify-content-center align-items-center item\">\r\n                                        {(flag && flag2) ? <h5 className=\"fw-bold\">{data[task-1].task}</h5> : \"Task will be Here\"}\r\n                                    </div>\r\n                                </div>=\r\n                                    <DropTarget targetKey=\"weGood\"  onHit={onHit} dropData={flag && flag2? data[task-1].answer:\"\"} >\r\n                                    <div  className=\"container d-flex justify-content-center align-items-center bg-light bg-opacity-50 item\">\r\n                                        {flag && flag2 ?<h5 className=\"text-dark\">drop here!</h5>:\"Drop Answer\"}\r\n                                    </div>\r\n                                    </DropTarget>\r\n                                </div>\r\n\r\n                        <div className=\"container-fluid m-1 d-flex justify-content-evenly\">\r\n                            <div className=\"\">\r\n                                <button onClick={change} type=\"button\" id=\"btn-next\" className=\"btn btn-warning btn-typical\">{ !shouldStartGame || task < 1 ?  'Start' : 'Next' }</button>\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <button onClick={showModal} type=\"button\"  className=\"btn btn-info btn-typical\">Intro</button>\r\n                                <Modal content={text} title={titleModal} closeModal={hideModal} display={mainDisplay} />\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <button  onClick={replayGame} type=\"button\"  className=\"btn btn-danger btn-typical\">Restart</button>\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <button onClick={showModalSolution} type=\"button\"  className=\"btn btn-primary btn-typical\">Solution</button>\r\n                                <Modal content={shouldStartGame? data[task-1].answer:\"\"} title={\"Solution\"} closeModal={hideModal} display={display3} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row d-flex justify-content-center flex-wrap\">\r\n                            <div className=\"col\">\r\n                            {flag && flag2 ? <Answer t={task-1} arg={array[0]} style={{color: 'white',backgroundColor: '#003366'}} /> : \"\"}\r\n                            {flag && flag2 ? <Answer t={task-1} arg={array[1]} style={{color: 'black',backgroundColor: '#ff8c1a'}} /> :\"\"}</div>\r\n                            <div className=\"col\">{flag && flag2 ? <Answer t={task-1}  arg={array[2]} style={{color: 'white',backgroundColor: '#269900'}} /> :\"\"}\r\n                            {flag && flag2 ? <Answer t={task-1}  arg={array[3]}  style={{color: 'black',backgroundColor: 'red'}} /> : \"\"}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n            <footer className=\"rounded-pill bg-danger\">\r\n                <p className='text-light'>Designed by: Mohibullah Sarfiraz, 2021/2022</p>\r\n            </footer>\r\n\r\n        </div>\r\n    )\r\n}\r\n export default Content\r\n\r\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Content from \"./components/Content\";\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <Content  />\n        {/*{startClicked ? <Start /> : <Content />}*/}\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <StrictMode>\n    <App />\n    </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}